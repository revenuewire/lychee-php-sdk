<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * production-lychee-api-v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2017-11-07T20:47:19Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\LycheeAPI;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return DefaultApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getSession
     *
     * @param string $id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CustomerSession
     */
    public function getSession($id)
    {
        list($response) = $this->getSessionWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getSessionWithHttpInfo
     *
     * @param string $id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CustomerSession, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSessionWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getSession');
        }
        // parse inputs
        $resourcePath = "/sessions/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomerSession',
                '/sessions/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomerSession', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomerSession', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSessionsByIp
     *
     * @param string $ip  (required)
     * @param string $affiliateInfoId  (optional)
     * @param string $destinationId  (optional)
     * @param string $productId  (optional)
     * @param string $partnerId  (optional)
     * @param string $merchantId  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ArrayOfcustomerSession
     */
    public function getSessionsByIp($ip, $affiliateInfoId = null, $destinationId = null, $productId = null, $partnerId = null, $merchantId = null)
    {
        list($response) = $this->getSessionsByIpWithHttpInfo($ip, $affiliateInfoId, $destinationId, $productId, $partnerId, $merchantId);
        return $response;
    }

    /**
     * Operation getSessionsByIpWithHttpInfo
     *
     * @param string $ip  (required)
     * @param string $affiliateInfoId  (optional)
     * @param string $destinationId  (optional)
     * @param string $productId  (optional)
     * @param string $partnerId  (optional)
     * @param string $merchantId  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ArrayOfcustomerSession, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSessionsByIpWithHttpInfo($ip, $affiliateInfoId = null, $destinationId = null, $productId = null, $partnerId = null, $merchantId = null)
    {
        // verify the required parameter 'ip' is set
        if ($ip === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ip when calling getSessionsByIp');
        }
        // parse inputs
        $resourcePath = "/sessions/ip/{ip}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($affiliateInfoId !== null) {
            $queryParams['affiliateInfoId'] = $this->apiClient->getSerializer()->toQueryValue($affiliateInfoId);
        }
        // query params
        if ($destinationId !== null) {
            $queryParams['destinationId'] = $this->apiClient->getSerializer()->toQueryValue($destinationId);
        }
        // query params
        if ($productId !== null) {
            $queryParams['productId'] = $this->apiClient->getSerializer()->toQueryValue($productId);
        }
        // query params
        if ($partnerId !== null) {
            $queryParams['partnerId'] = $this->apiClient->getSerializer()->toQueryValue($partnerId);
        }
        // query params
        if ($merchantId !== null) {
            $queryParams['merchantId'] = $this->apiClient->getSerializer()->toQueryValue($merchantId);
        }
        // path params
        if ($ip !== null) {
            $resourcePath = str_replace(
                "{" . "ip" . "}",
                $this->apiClient->getSerializer()->toPathValue($ip),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ArrayOfcustomerSession',
                '/sessions/ip/{ip}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ArrayOfcustomerSession', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ArrayOfcustomerSession', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSessionsBySessionId
     *
     * @param string $sessionId  (required)
     * @param string $affiliateInfoId  (optional)
     * @param string $destinationId  (optional)
     * @param string $productId  (optional)
     * @param string $partnerId  (optional)
     * @param string $merchantId  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ArrayOfcustomerSession
     */
    public function getSessionsBySessionId($sessionId, $affiliateInfoId = null, $destinationId = null, $productId = null, $partnerId = null, $merchantId = null)
    {
        list($response) = $this->getSessionsBySessionIdWithHttpInfo($sessionId, $affiliateInfoId, $destinationId, $productId, $partnerId, $merchantId);
        return $response;
    }

    /**
     * Operation getSessionsBySessionIdWithHttpInfo
     *
     * @param string $sessionId  (required)
     * @param string $affiliateInfoId  (optional)
     * @param string $destinationId  (optional)
     * @param string $productId  (optional)
     * @param string $partnerId  (optional)
     * @param string $merchantId  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ArrayOfcustomerSession, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSessionsBySessionIdWithHttpInfo($sessionId, $affiliateInfoId = null, $destinationId = null, $productId = null, $partnerId = null, $merchantId = null)
    {
        // verify the required parameter 'sessionId' is set
        if ($sessionId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sessionId when calling getSessionsBySessionId');
        }
        // parse inputs
        $resourcePath = "/sessions/session/{sessionId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($affiliateInfoId !== null) {
            $queryParams['affiliateInfoId'] = $this->apiClient->getSerializer()->toQueryValue($affiliateInfoId);
        }
        // query params
        if ($destinationId !== null) {
            $queryParams['destinationId'] = $this->apiClient->getSerializer()->toQueryValue($destinationId);
        }
        // query params
        if ($productId !== null) {
            $queryParams['productId'] = $this->apiClient->getSerializer()->toQueryValue($productId);
        }
        // query params
        if ($partnerId !== null) {
            $queryParams['partnerId'] = $this->apiClient->getSerializer()->toQueryValue($partnerId);
        }
        // query params
        if ($merchantId !== null) {
            $queryParams['merchantId'] = $this->apiClient->getSerializer()->toQueryValue($merchantId);
        }
        // path params
        if ($sessionId !== null) {
            $resourcePath = str_replace(
                "{" . "sessionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($sessionId),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ArrayOfcustomerSession',
                '/sessions/session/{sessionId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ArrayOfcustomerSession', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ArrayOfcustomerSession', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
